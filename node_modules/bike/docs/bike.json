{
  "data": [
    {
      "file": "bike.js",
      "comments": [
        {
          "tags": [],
          "description": {
            "full": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "summary": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "body": ""
          },
          "ignore": true,
          "code": "// if node\nvar _ = require('underscore')\n  ;\n// end"
        },
        {
          "tags": [
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Bike.\n",
            "summary": "Bike.\n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "var Bike = exports = module.exports = function Bike(){\n  return Bike.attach.apply(Bike, arguments);\n};",
          "ctx": {
            "type": "declaration",
            "name": "Bike",
            "value": "exports = module.exports = function Bike(){",
            "string": "Bike"
          }
        },
        {
          "tags": [
            {
              "type": "type",
              "types": [
                "String"
              ]
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Library version.\n\nReturns a string in the form of `n.n.n`.\n",
            "summary": "Library version.",
            "body": "Returns a string in the form of `n.n.n`.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.version = '0.5.3';",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "version",
            "value": "'0.5.3'",
            "string": "Bike.version"
          }
        },
        {
          "tags": [
            {
              "type": "type",
              "types": [
                "String"
              ]
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Delimiter used among namespaces.\n\nDefault `.`.\n",
            "summary": "Delimiter used among namespaces.",
            "body": "Default `.`.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.delimiter = '.';",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "delimiter",
            "value": "'.'",
            "string": "Bike.delimiter"
          }
        },
        {
          "tags": [
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "see",
              "local": "bike/namespace.js",
              "visibility": "bike/namespace.js"
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Namespace manager reference.\n",
            "summary": "Namespace manager reference.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.namespace = require('./bike/namespace');",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "namespace",
            "value": "require('./bike/namespace')",
            "string": "Bike.namespace"
          }
        },
        {
          "tags": [
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "see",
              "local": "bike/cache.js",
              "visibility": "bike/cache.js"
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Cache manager reference.\n",
            "summary": "Cache manager reference.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.cache = require('./bike/cache');",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "cache",
            "value": "require('./bike/cache')",
            "string": "Bike.cache"
          }
        },
        {
          "tags": [
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "see",
              "local": "bike/base.js",
              "visibility": "bike/base.js"
            },
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Base object interpolation.\n",
            "summary": "Base object interpolation.\n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "Bike.base = require('./bike/base');;",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "base",
            "value": "require('./bike/base')",
            "string": "Bike.base"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "Object"
              ],
              "name": "target",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Attaches methods `define` and `create` on a given object.\n\nReturns the given object.\n",
            "summary": "Attaches methods `define` and `create` on a given object.",
            "body": "Returns the given object.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.attach = Bike.extend = function(target, namespaces){\n  if(target){\n    target.define = Bike.define;\n    target.create = Bike.create;\n    target.namespace = Bike.namespace;\n  }\n  \n  if(namespaces){\n    Bike.namespace(namespaces);\n  }\n  \n  return Bike;\n};",
          "ctx": {
            "type": "property",
            "receiver": "Bike",
            "name": "attach",
            "value": "Bike.extend = function(target, namespaces){",
            "string": "Bike.attach"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "Object"
              ],
              "name": "options",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "[Function]"
              ],
              "name": "callback",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Defines in the `Bike.cache` a new object.\n\nReturns the cached object.\n",
            "summary": "Defines in the `Bike.cache` a new object.",
            "body": "Returns the cached object.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.define = function(name, plain, options, callback){\n  var obj = null\n    ;\n  \n  if(!_.isBoolean(plain)){\n    callback = options;\n    options = plain;\n    plain = false;\n  }\n  \n  if(!plain){\n    if(options && options.extend){\n      obj = Bike.cache.get(options.extend);\n      \n      delete options.extend;\n    }else{\n      obj = Bike.base;\n    }\n    \n    if(options){\n      obj = Bike.base.extend(options, obj);\n    }\n  \n    if(options && options.mixins){\n      options.mixins.forEach(function(mixin){\n        mixin = Bike.cache.get(mixin);\n        obj = Bike.base.mixin(mixin, obj);\n      });\n      \n      delete options.mixins;\n    }\n    \n  }else{\n    // plain\n    obj = options;\n  }\n  \n  Bike.cache.set(name, obj);\n  \n  if(callback){\n    callback.apply(obj, [name, options]);\n  }\n  \n  return obj;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Bike",
            "name": "define",
            "string": "Bike.define()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "Object"
              ],
              "name": "options",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "[Function]"
              ],
              "name": "callback",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Creates a new object giving a namespace and options\n\nReturns the object just created.\n",
            "summary": "Creates a new object giving a namespace and options",
            "body": "Returns the object just created.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Bike.create = function(name, plain, options, callback){\n  var obj = Bike.cache.get(name)\n    , isSingleton = false\n    ;\n  \n  if(!_.isBoolean(plain)){\n    callback = options;\n    options = plain;\n    plain = false;\n  }\n  \n  if(!plain){\n    if((obj && obj.hasOwnProperty('singleton') && obj.singleton) || (options && options.singleton)){\n      isSingleton = true;\n    }\n    \n    if(options){\n      obj = Bike.base.extend(options, obj);\n    }\n    \n    if(isSingleton){\n      \n      if(_.has(Bike.cache.singletons, name)){\n        obj = Bike.cache.singletons[name];\n      }else{\n        obj = Bike.cache.singletons[name] = Bike.base.create.call(obj, options || {});\n        \n        if(callback){\n          callback.apply(obj, [name, options]);\n        } \n      }\n      \n    }else{\n      obj = Bike.base.create.call(obj, options || {});\n      \n      if(callback){\n        callback.apply(obj, [name, options]);\n      } \n    }\n  }else{\n    // plain\n    obj = new obj();\n  }\n  \n  return obj;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Bike",
            "name": "create",
            "string": "Bike.create()"
          }
        }
      ]
    },
    {
      "file": "bike/proto.js",
      "comments": [
        {
          "tags": [],
          "description": {
            "full": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "summary": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "body": ""
          },
          "ignore": true,
          "code": "// if node\nvar _ = require('underscore')\n  ;\n// end\n\n// if browser\n//if(typeof Object.create !== 'function'){\n//"
        },
        {
          "tags": [],
          "description": {
            "full": "//   * Object.create\n//   * \n//   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\n//",
            "summary": "//   * Object.create\n//   * \n//   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\n//",
            "body": ""
          },
          "ignore": false,
          "code": "//  Object.create = function(obj){\n//    if(arguments.length > 1){\n//      throw new Error('Object.create implementation only accepts the first parameter.');\n//    }\n//\n//    function F() {}\n//    F.prototype = obj;\n//\n//    return new F();\n//  };\n//};\n// end\n\n// if browser\n//if(typeof Object.getPrototypeOf !== 'function'){\n//"
        },
        {
          "tags": [],
          "description": {
            "full": "//   * Object.getPrototypeOf\n//   * \n//   * @see http://ejohn.org/blog/objectgetprototypeof/\n//",
            "summary": "//   * Object.getPrototypeOf\n//   * \n//   * @see http://ejohn.org/blog/objectgetprototypeof/\n//",
            "body": ""
          },
          "ignore": false,
          "code": "//  if(typeof 'test'.__proto__ === 'object'){\n//    Object.getPrototypeOf = function(object){\n//      return object.__proto__;\n//    };\n//  }else{\n//    Object.getPrototypeOf = function(object){\n//      return object.constructor.prototype;\n//    };\n//  }\n//};\n// end"
        },
        {
          "tags": [
            {
              "type": "see",
              "title": "",
              "url": "http://github.com/daffl/uberproto",
              "visibility": "http://github.com/daffl/uberproto"
            }
          ],
          "description": {
            "full": "Proto.\nThanks to uberproto\n",
            "summary": "Proto.\nThanks to uberproto\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "var Proto = exports = module.exports = {",
          "ctx": {
            "type": "declaration",
            "name": "Proto",
            "value": "exports = module.exports = {",
            "string": "Proto"
          }
        },
        {
          "tags": [],
          "description": {
            "full": "Create a new object using Object.create. The arguments will be\npassed to the new instances init method or to a method name set in\n__init.",
            "summary": "Create a new object using Object.create. The arguments will be\npassed to the new instances init method or to a method name set in\n__init.",
            "body": ""
          },
          "ignore": false,
          "code": "create: function(){\n    var instance = Object.create(this)\n      , init = _.isString(instance.__init) ? instance.__init : 'init'\n      ;\n      \n    if(_.isFunction(instance[init])){\n      instance[init].apply(instance, arguments);\n    }\n    \n    return instance;\n  },"
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "prop"
              ],
              "name": "The",
              "description": "properties to mix in"
            },
            {
              "type": "param",
              "types": [
                "obj"
              ],
              "name": "[optional]",
              "description": "The object to add the mixin"
            }
          ],
          "description": {
            "full": "Mixin a given set of properties",
            "summary": "Mixin a given set of properties",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "mixin: function(prop, obj){\n    var self = obj || this\n      , fnTest = /xyz/.test(function(){xyz;}) ? /\\b_super\\b/ : /.*/\n      , _super = Object.getPrototypeOf(self) || self.prototype\n      , oldFn\n      ;\n\n    // Copy the properties over\n    for(var name in prop){\n      // store the old function which would be overwritten\n      oldFn = self[name];\n      // Check if we're overwriting an existing function\n      self[name] = (_.isFunction(prop[name]) && _.isFunction(_super[name]) && fnTest.test(prop[name]))\n        || (_.isFunction(oldFn) && _.isFunction(prop[name]))\n        ? (function(old, name, fn){return function(){\n            \n          var tmp = this._super;\n\n          // Add a new ._super() method that is the same method\n          // but either pointing to the prototype method\n          // or to the overwritten method\n          this._super = (_.isFunction(old)) ? old : _super[name];\n\n          // The method only need to be bound temporarily, so we\n          // remove it when we're done executing\n          var ret = fn.apply(this, arguments);\n          this._super = tmp;\n          \n          return ret;\n      }})(oldFn, name, prop[name])\n      : prop[name];\n      \n      if((name == self.__init || name == prop.__init) && _.isFunction(self[name])){\n         //self[name] = _.once(self[name]);\n        self[name] = self[name];\n      }\n    }\n\n    return self;\n  },"
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "prop"
              ],
              "name": "The",
              "description": "properties to extend with"
            },
            {
              "type": "param",
              "types": [
                "obj"
              ],
              "name": "[optional]",
              "description": "The object to extend from"
            },
            {
              "type": "returns",
              "string": "The extended object"
            }
          ],
          "description": {
            "full": "Extend the current or a given object with the given property\nand return the extended object.",
            "summary": "Extend the current or a given object with the given property\nand return the extended object.",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "extend: function(attrs, obj){\n    return this.mixin(attrs, Object.create(obj || this));\n  },"
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "name"
              ],
              "name": "Name",
              "description": "of the method to prox"
            },
            {
              "type": "param",
              "types": [
                "context"
              ],
              "name": "[optional]",
              "description": "The object to use as the context"
            }
          ],
          "description": {
            "full": "Return a callback function with this set to the current or a given context object.",
            "summary": "Return a callback function with this set to the current or a given context object.",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "proxy: function(name, obj){\n    var self = obj || this\n      ;\n    \n    return function(){\n      return self[name].apply(self, arguments);\n    }\n  }\n  \n}"
        }
      ]
    },
    {
      "file": "bike/base.js",
      "comments": [
        {
          "tags": [],
          "description": {
            "full": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "summary": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "body": ""
          },
          "ignore": true,
          "code": "var Proto = require('./proto')\n  ;",
          "ctx": {
            "type": "declaration",
            "name": "Proto",
            "value": "require('./proto')",
            "string": "Proto"
          }
        },
        {
          "tags": [],
          "description": {
            "full": "Base.",
            "summary": "Base.",
            "body": ""
          },
          "ignore": false,
          "code": "var Base = exports = module.exports = Proto.extend({\n  \n  //__init : 'initialize'\n  \n});",
          "ctx": {
            "type": "declaration",
            "name": "Base",
            "value": "exports = module.exports = Proto.extend({",
            "string": "Base"
          }
        }
      ]
    },
    {
      "file": "bike/namespace.js",
      "comments": [
        {
          "tags": [],
          "description": {
            "full": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "summary": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "body": ""
          },
          "ignore": true,
          "code": "// if node\nvar _ = require('underscore')\n  ;\n// end"
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "[String]"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "[String]"
              ],
              "name": "value",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "String"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Manager and placeholder of the namespace object.\n\n## Examples\n\n   Bike.namespace()\n   // get all\n   // => []\n\n   Bike.namespace('foo')\n   // get\n   // => String\n\n   Bike.namespace('foo', './my/path/to/it')\n   // set\n   // => String\n",
            "summary": "Manager and placeholder of the namespace object.",
            "body": "## Examples\n\n   Bike.namespace()\n   // get all\n   // => []\n\n   Bike.namespace('foo')\n   // get\n   // => String\n\n   Bike.namespace('foo', './my/path/to/it')\n   // set\n   // => String\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "var Namespace = function Namespace(name, value){\n  if(_.isString(name)){\n    //single\n    if(!value && name){\n      value = Namespace.get(name);\n      return value ? value.target : null;\n    }else if(value && name){\n      return Namespace.set.apply(this, arguments);\n    }\n  }else{\n    //multiple\n    for(var i in name){\n      Namespace(i, name[i]);\n    }\n  }\n  return Namespace.items;\n};",
          "ctx": {
            "type": "function",
            "name": "Namespace",
            "string": "Namespace()"
          }
        },
        {
          "tags": [
            {
              "type": "type",
              "types": [
                "Array"
              ]
            },
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Namespace container.\n",
            "summary": "Namespace container.\n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "Namespace.items = [];",
          "ctx": {
            "type": "property",
            "receiver": "Namespace",
            "name": "items",
            "value": "[]",
            "string": "Namespace.items"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "String",
                "null"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Get the target of a given namespace.\n",
            "summary": "Get the target of a given namespace.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Namespace.get = function(name){\n  return _.find(Namespace.items.sort(function(first, second){\n    return second.name.length - first.name.length;\n  }), function(link){\n    return (name.indexOf(link.name) != -1);\n  });\n  \n  return null;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Namespace",
            "name": "get",
            "string": "Namespace.get()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "value",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "String"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Add or replace a target of a given namespace.\n\nReturns the give target;\n",
            "summary": "Add or replace a target of a given namespace.",
            "body": "Returns the give target;\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Namespace.set = function(name, value){\n  var ns\n    ;\n  \n  if(!_.find(Namespace.items, function(ns){\n    return ns.name === name;\n  })){\n    ns = Namespace.items[Namespace.items.push({\n      name: name,\n      target: value\n    }) - 1];\n  }else{\n    ns = Namespace.get(name);\n    ns.target = value;\n  }\n  \n  return ns;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Namespace",
            "name": "set",
            "string": "Namespace.set()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Array"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Removes a namespace.\n\nReturns the namespace container.\n",
            "summary": "Removes a namespace.",
            "body": "Returns the namespace container.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Namespace.remove = function(name){\n  return Namespace.items = _.reject(Namespace.items, function(ns){\n    return ns.name == name;\n  });\n};",
          "ctx": {
            "type": "method",
            "receiver": "Namespace",
            "name": "remove",
            "string": "Namespace.remove()"
          }
        },
        {
          "tags": [
            {
              "type": "return",
              "types": [
                "Array"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Empty the namespace container and returns it.\n",
            "summary": "Empty the namespace container and returns it.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Namespace.clear = function(){\n  return Namespace.items = [];\n};",
          "ctx": {
            "type": "method",
            "receiver": "Namespace",
            "name": "clear",
            "string": "Namespace.clear()"
          }
        },
        {
          "tags": [],
          "description": {
            "full": "Exports.",
            "summary": "Exports.",
            "body": ""
          },
          "ignore": true,
          "code": "exports = module.exports = Namespace;"
        }
      ]
    },
    {
      "file": "bike/cache.js",
      "comments": [
        {
          "tags": [],
          "description": {
            "full": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "summary": "Bike\nCopyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>\nMIT Licensed",
            "body": ""
          },
          "ignore": true,
          "code": "var bike = require('../bike')\n  , namespace = require('./namespace')\n// if node\n  , path = require('path')\n  ,\t_ = require('underscore')\n// end  \n  ;",
          "ctx": {
            "type": "declaration",
            "name": "bike",
            "value": "require('../bike')",
            "string": "bike"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "[String]"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "[*]"
              ],
              "name": "value",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Object",
                "*"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Manager and placeholder of the cache object.\n\n## Examples\n\n   Bike.cache()\n   // get all\n   // => {Object}\n\n   Bike.cache('foo.myclass')\n   // get\n   // => {*}\n\n   Bike.cache('foo.myclass', *)\n   // set\n   // => {*}\n",
            "summary": "Manager and placeholder of the cache object.",
            "body": "## Examples\n\n   Bike.cache()\n   // get all\n   // => {Object}\n\n   Bike.cache('foo.myclass')\n   // get\n   // => {*}\n\n   Bike.cache('foo.myclass', *)\n   // set\n   // => {*}\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "var Cache = function Cache(name, value){\n  if(!value && name){\n    value = Cache.get(name);\n    return value;\n  }else if(value && name){\n    return Cache.set.apply(this, arguments);\n  }\n  \n  return Cache.items;\n};",
          "ctx": {
            "type": "function",
            "name": "Cache",
            "string": "Cache()"
          }
        },
        {
          "tags": [
            {
              "type": "type",
              "types": [
                "Object"
              ]
            },
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Singletons container.\n",
            "summary": "Singletons container.\n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "Cache.singletons = {};",
          "ctx": {
            "type": "property",
            "receiver": "Cache",
            "name": "singletons",
            "value": "{}",
            "string": "Cache.singletons"
          }
        },
        {
          "tags": [
            {
              "type": "type",
              "types": [
                "Object"
              ]
            },
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Cache container.\n",
            "summary": "Cache container.\n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "// if node\nCache.items = global;\n// end\n// if browser\n//Cache.items = window;\n// end"
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "*",
                "null"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Get an element from the cache container.\n",
            "summary": "Get an element from the cache container.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Cache.get = function(name){\n  if(!_.isString(name)) return name;\n  \n  var parent = Cache.items\n    , seed = null\n    , seeds = name.split(bike.delimiter)\n    , name = _.last(seeds)\n    ;\n\n  for(var i = 0; i < seeds.length-1; i++){\n    seed = seeds[i];\n    \n    if(!parent[seed]){\n      Cache.require( seeds, 0 );\n    };\n\n    parent = parent[seed];\n  };\n  \n  if(!parent[name]) {\n    Cache.require( seeds, 1 );\n  }\n  \n  return parent[name] ? parent[name].$bike : null;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Cache",
            "name": "get",
            "string": "Cache.get()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "param",
              "types": [
                "*"
              ],
              "name": "value",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "*"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Add or replace a element in the cache container.\n\nReturns the give element;\n",
            "summary": "Add or replace a element in the cache container.",
            "body": "Returns the give element;\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Cache.set = function(name, value){\n\n  var parent = Cache.items\n    , seed = null\n    , seeds = name.split(bike.delimiter)\n    , name = _.last(seeds)\n    ;\n\n  for(var i = 0; i < seeds.length-1; i++){\n    seed = seeds[i];\n    \n    if(!parent[seed]){\n      parent[seed] = {};\n    }\n    parent = parent[seed];\n  };\n\n  if(parent[name]){\n    parent[name].$name = name;\n    parent[name].$bike = value;\n  }else{\n    parent[name] = {\n      $name: name,\n      $bike: value\n    };\n  }\n  \n  return parent[name].$bike;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Cache",
            "name": "set",
            "string": "Cache.set()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "To be implemented. Removes an element from the cache container.\n\nReturns the cache container.\n",
            "summary": "To be implemented. Removes an element from the cache container.",
            "body": "Returns the cache container.\n"
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Cache.remove = function(name){\n  \n  // NEED TO CLEAR ALSO THE CACHE OF nodejs require\n  // with the \"may\" required cached object\n  // so it will be reloaded\n  // because otherwise the define function wont run again \n  \n  return Cache.items;\n};",
          "ctx": {
            "type": "method",
            "receiver": "Cache",
            "name": "remove",
            "string": "Cache.remove()"
          }
        },
        {
          "tags": [
            {
              "type": "return",
              "types": [
                "Object"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "public"
            }
          ],
          "description": {
            "full": "Empty the cache container and returns it.\n",
            "summary": "Empty the cache container and returns it.\n",
            "body": ""
          },
          "isPrivate": false,
          "ignore": false,
          "code": "Cache.clear = function(){\n  return Cache.items = {};\n};",
          "ctx": {
            "type": "method",
            "receiver": "Cache",
            "name": "clear",
            "string": "Cache.clear()"
          }
        },
        {
          "tags": [
            {
              "type": "param",
              "types": [
                "String"
              ],
              "name": "name",
              "description": ""
            },
            {
              "type": "return",
              "types": [
                "*",
                "null"
              ],
              "description": ""
            },
            {
              "type": "api",
              "visibility": "private"
            }
          ],
          "description": {
            "full": "Requires from `@node require` the missing library. \n",
            "summary": "Requires from `@node require` the missing library. \n",
            "body": ""
          },
          "isPrivate": true,
          "ignore": false,
          "code": "Cache.require = function(name, status){\n  var seeds = null\n    , link = null\n    ;\n  \n  if(_.isArray(name)){\n    seeds = name;\n    name = name.join(bike.delimiter);  \n  }else{\n    seeds = name.split(bike.delimiter);\n  }\n  \n  link = namespace.get(name);\n  \n  if(!link){\n    return false;\n  }\n  \n  var req;\n  \n  try{\n    // Look for behere/lib/behere",
          "ctx": {
            "type": "method",
            "receiver": "Cache",
            "name": "require",
            "string": "Cache.require()"
          }
        },
        {
          "tags": [],
          "description": {
            "full": "js    \n    req = require(link.target + '/' + _.last(seeds, (seeds.length - link.name.split(bike.delimiter).length)).join('/'));\n    \n  }catch(e){\n     \n    if(seeds.length <= 2){\n      // Look for any \"behere-*\" module\n      // example:\n      // behere.aaa => behere-aaa\n      req = require(name.replace('.','-'));\n      \n    }else{\n      // Look for child files \"behere-",
            "summary": "js    \n    req = require(link.target + '/' + _.last(seeds, (seeds.length - link.name.split(bike.delimiter).length)).join('/'));\n    \n  }catch(e){\n     \n    if(seeds.length <= 2){\n      // Look for any \"behere-*\" module\n      // example:\n      // behere.aaa => behere-aaa\n      req = require(name.replace('.','-'));\n      \n    }else{\n      // Look for child files \"behere-",
            "body": ""
          },
          "ignore": false,
          "code": "ib"
        },
        {
          "tags": [],
          "description": {
            "full": "\"\n      // example:\n      // behere.aaa.bbb.ccc.ddd => behere-aaa/lib/aaa/bbb/ccc/ddd\n      req = [];\n      \n      for(var i=0; i<seeds.length; i++){\n        if(i===0){\n          req.push(seeds[i]);\n        }else if(i===1){\n          req[0] += ('-' + seeds[i]);\n          req.push('lib', seeds[i]);\n        }else{\n          req.push(seeds[i]);\n        }\n      };\n      \n      req = require(req.join('/'));\n      \n    }\n    \n  }\n  \n  return req;\n};\n\n/*!\nExports.",
            "summary": "\"\n      // example:\n      // behere.aaa.bbb.ccc.ddd => behere-aaa/lib/aaa/bbb/ccc/ddd\n      req = [];\n      \n      for(var i=0; i<seeds.length; i++){\n        if(i===0){\n          req.push(seeds[i]);\n        }else if(i===1){\n          req[0] += ('-' + seeds[i]);\n          req.push('lib', seeds[i]);\n        }else{\n          req.push(seeds[i]);\n        }\n      };\n      \n      req = require(req.join('/'));\n      \n    }\n    \n  }\n  \n  return req;\n};",
            "body": "/*!\nExports."
          },
          "ignore": false,
          "code": "exports = module.exports = Cache;"
        }
      ]
    }
  ]
}