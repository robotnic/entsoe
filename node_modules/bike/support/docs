#!/usr/bin/env node

/*!
 * Bike
 * Copyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>
 * MIT Licensed
 */

var dox = require('dox')
  , path = require('path')
  , fs = require('fs')
  , wrench = require('wrench')
  ;

/*!
 * Make docs.
 */

var source = path.join(__dirname, '..', 'lib')
  , output = path.join(__dirname, '..', 'docs')
  , text
  , comments
  , ret = []
  ;

wrench.readdirSyncRecursive(source).forEach(function(file){
  if(!fs.statSync(path.join(source, file)).isDirectory()){
    text = fs.readFileSync(path.join(source, file), 'utf-8');
    comments = dox.parseComments(text, {raw:true});
    
    ret.push({
      file: file,
      comments: comments
    });
  }
});

// json
var json = JSON.stringify({data: ret}, null, 2);
fs.writeFileSync(path.join(output, 'bike.json'), json, 'utf-8');

ret.forEach(function(file){
  // markdown
  var markdown = []
    , ignore
    ;
    
  file.comments.forEach(function(comment){
    ignore = false;
    
    if(comment.ignore){
      ignore = true;
    };
    if(comment.isPrivate){
      ignore = true;
    };
    if(!comment.ctx){
      ignore = true;
    };
    if(!comment.description.full.indexOf('Module dep')){
      ignore = true;
    };
    if(!ignore){
      var ctx = comment.ctx;
      markdown.push('');
      markdown.push('# ' + ctx.string);
      markdown.push('');
      markdown.push(comment.description.full.trim().replace(/^/gm, '  '));
    }
  });  
  fs.writeFileSync(path.join(output, file.file).replace('.js', '.md'), markdown.join('\n'), 'utf-8');
});

console.log('Documentation build successfully');
