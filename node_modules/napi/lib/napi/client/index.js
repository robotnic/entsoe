/*!
 * napi
 * Copyright(c) 2012 Gabriele Di Stefano <gabriele.ds@gmail.com>
 * MIT Licensed
 */

var Napi = require('../../napi')
  , _ = require('underscore')
  , request = require('request')
  , path = require('path')
  ;


Napi.define('napi.client', {
  
  extend: 'napi.client.route',
  
  // host
  host: null,
  
  // isAuthenticated
  isAuthenticated: false,
  
  // route
  route: null,
  
  // default params
  params: {
    'default': {
      'type': 'string',
      'required': false
    }
  },
  
  // basic auth
  auth: null /*{
    user: null,
    password: null
  }*/,
  
  // oauth
  oauth: null /*{
    token: null
  }*/,
  
  // initialize
  initialize: function(){
    var self = this;
    
    if(!self.route){
      self.route = path.join(path.dirname(module.parent.parent.parent.parent.filename), 'routes.json');
    }
      
    self.route = JSON.parse(require('fs').readFileSync(self.route, 'utf8'));
    
    // src
    if(self.src){
      Napi.namespace(self.name, self.src);
    }
    
    // user authentication
    if(self.auth && !_.isString(self.auth)){
      self.authenticate(self.auth.user, self.auth.password);
    }
    
    // defaults
    if(self.route.defaults){
      
      // default params
      _.each(self.route.defaults.params || [], function(param, name){
        self.params[name] = _.defaults(param, self.params['default']);
      });
    }
    
    this._super.call(this, arguments);
    
    delete self.route;
  },
  
  // Basic authentication
  authenticate: function(user, password){
    var self = this;
      
    self.auth = new Buffer(self.auth.user + ':' + self.auth.password, "ascii").toString("base64");
    self.isAuthenticated = true;
  },
  
  // Oauth authentication
  oauthenticate: function(token){
    var self = this;
    
    self.isAuthenticated = true;
  }
  
});
